# This script will find all DC's in the environment and then test to determine what one is "fastest."  
# The original script was found elsewhere online and I modified it to fit my use case....finding what DC's respond the fastest in a large AD environment.

# Depending on your use case, this may not be needed.  Smaller domains with fewer DC's or single locations may be fine with step2 and step3 of this process.

# Variables
  # No Vars needed, this script finds all DC's for your current domain.
  # If you have access to multiple domains, you may want to tweak the $DomainName var in the below section.

# Load the PS Module
Import-Module ActiveDirectory

# Get your ad domain
$DomainName = (Get-ADDomain).DNSRoot
 
# Get all DC's
$AllDCs = Get-ADDomainController -Filter * -Server $DomainName | Select-Object Hostname,Ipv4address,isGlobalCatalog,Site,Forest,OperatingSystem
  
# Create empty DataTable object
$DCTable = New-Object System.Data.DataTable
      
# Add columns
$DCTable.Columns.Add() | Out-Null
$DCTable.Columns[0].Caption = "Hostname"
$DCTable.Columns[0].ColumnName = "Hostname"
  
$DCTable.Columns.Add() | Out-Null
$DCTable.Columns[1].Caption = "IPv4Address"
$DCTable.Columns[1].ColumnName = "IPv4Address"
                      
$DCTable.Columns.Add() | Out-Null
$DCTable.Columns[2].Caption = "isGlobalCatalog"
$DCTable.Columns[2].ColumnName = "isGlobalCatalog"
$DCTable.Columns[2].DataType = "Boolean"
  
$DCTable.Columns.Add() | Out-Null
$DCTable.Columns[3].Caption = "Site"
$DCTable.Columns[3].ColumnName = "Site"
  
$DCTable.Columns.Add() | Out-Null
$DCTable.Columns[4].Caption = "Forest"
$DCTable.Columns[4].ColumnName = "Forest"
  
$DCTable.Columns.Add() | Out-Null
$DCTable.Columns[5].Caption = "OperatingSystem"
$DCTable.Columns[5].ColumnName = "OperatingSystem"
 
$DCTable.Columns.Add() | Out-Null
$DCTable.Columns[6].Caption = "PingStatus"
$DCTable.Columns[6].ColumnName = "PingStatus"
 
$DCTable.Columns.Add() | Out-Null
$DCTable.Columns[7].Caption = "PingTime"
$DCTable.Columns[7].ColumnName = "PingTime" 
 
# Loop each DC                        
ForEach($DC in $AllDCs)
{  
    $ping = ping $DC.Hostname -n 1 | Where-Object {$_ -match "Reply" -or $_ -match "Request timed out" -or $_ -match "Destination host unreachable"}
 
    switch ($ping)
    {
        {$_ -like "Reply*" }                          { $PingStatus = "Success" }
        {$_ -like "Request timed out*"}               { $PingStatus = "Timeout" }
        {$_ -like "Destination host unreachable*"}    { $PingStatus = "Unreachable" }
        default                                       { $PingStatus = "Unknown" }
    }

	# This grabs some of the standard ping output.  The output could be formatted into different columns, but this works for what I needed.
	$PingTime = ping $DC.Hostname -n 4 | Where-Object {$_ -match "Average"}

          
    $DCTable.Rows.Add(  $DC.Hostname,
                        $DC.Ipv4address,
                        $DC.isGlobalCatalog,
                        $DC.Site,
                        $DC.Forest,
                        $DC.OperatingSystem,
                        $PingStatus,
						$PingTime
                              
                        )| Out-Null                          
}
 
# Display results in a PS table pop-up.  This could be tweaked to output to a CSV if desired.
$DCTable | Sort-Object Site | Out-GridView
 
